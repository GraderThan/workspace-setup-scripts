local({

  # ---- Attach active R terminal to VSC ----
  if (interactive() && Sys.getenv("RSTUDIO") == "") {
    try(source(file.path(Sys.getenv(if (.Platform$OS.type == "windows") "USERPROFILE" else "HOME"), ".vscode-R", "init.R")), silent = TRUE)
  }

  # ---- CRAN mirror ----
  repos <- getOption("repos")
  if (is.null(repos) || isTRUE(repos["CRAN"] == "@CRAN@")) repos <- c()
  repos["CRAN"] <- "__CRAN_URL__"  # e.g. PPM noble/jammy URL
  options(repos = repos)

  # Ensure user library exists (silent, no console output)
  local({
    libdir <- file.path(path.expand("~/.R/libs"), as.character(getRversion()))
    if (!dir.exists(libdir)) dir.create(libdir, recursive = TRUE, showWarnings = FALSE)
  })

  # ---- BSPM (auto-inserted on Ubuntu) ----
  __BSPM_BLOCK__

  # ---- Parallel source builds + reliable downloads ----
  options(
    Ncpus = max(1L, parallel::detectCores() - 1L),
    download.file.method = "libcurl"
  )

  # ---- Fast installer helper (no installed.packages() scan) ----
  fast_install <- function(pkgs) {
    missing <- pkgs[!vapply(pkgs, requireNamespace, logical(1), quietly = TRUE)]
    if (!length(missing)) return(invisible(TRUE))
    if (requireNamespace("pak", quietly = TRUE)) {
      pak::pkg_install(missing, ask = FALSE)
    } else {
      install.packages(missing)
    }
    invisible(TRUE)
  }
  options(graderthan.fast_install = fast_install)

  # ---- Friendly defaults ----
  options(stringsAsFactors = FALSE, scipen = 999, width = 100)

  # ---- Interactive-only classroom niceties ----
  if (interactive()) {

    # Detect VS Code robustly (R Terminal may not set VSCODE_PID)
    in_vscode <- identical(tolower(Sys.getenv("TERM_PROGRAM")), "vscode")

    # If in VS Code and DISPLAY is empty, try to adopt :1 (only if reachable)
    if (in_vscode && Sys.getenv("DISPLAY") == "") {
      xa <- Sys.getenv("XAUTHORITY", "~/.Xauthority")
      # Make sure :1 exists before setting it
      reachable <- try(system("xdpyinfo -display :1 >/dev/null 2>&1"), silent = TRUE)
      if (!inherits(reachable, "try-error") && reachable == 0 && file.exists(path.expand(xa))) {
        Sys.setenv(DISPLAY=":1", XAUTHORITY=path.expand(xa))
        # Optionally pre-load Tk so tcltk works later; ignore errors if headless
        try(tcltk::.Tcl("package require Tk"), silent = TRUE)
      }
    }

    startup_pkgs <- c(__STARTUP_PKGS__)
    invisible(lapply(startup_pkgs, function(pkg) {
      if (requireNamespace(pkg, quietly = TRUE)) library(pkg, character.only = TRUE)
    }))

    # Quieter output for students (optional)
    options(
      dplyr.summarise.inform = FALSE,
      readr.show_col_types = FALSE,
      httpgd.autobrowse      = FALSE
    )

    # --- Lazy-start httpgd on first plot (prevents "launch helper" warning) ---
    if (requireNamespace("httpgd", quietly = TRUE)) {
      setHook("plot.new", function(...) {
        if (!isTRUE(getOption("graderthan.hgd.started", FALSE))) {
          # start httpgd only once, silently
          try(httpgd::hgd(silent = TRUE), silent = TRUE)
          options(graderthan.hgd.started = TRUE)
        }
      }, action = "prepend")
    }

    cat("\033[1;34mGrader Than - R Profile Loaded\033[0m\n")
  }
})