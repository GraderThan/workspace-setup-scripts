#!/bin/bash

# Script to compile and run C files in the current directory.
# Usage: ./run-c [options]

# Default values
DEFAULT_BUILD_DIR="/tmp/graderthan/ide/c/build"
# Using gcc, standard C11, common warnings enabled
DEFAULT_BUILD_CMD_TEMPLATE="gcc *.c -g -std=c11 -Wall -Wextra -Wpedantic -Werror=implicit-function-declaration -Werror=incompatible-pointer-types -Werror=int-conversion -Werror=return-type -Werror=format -o"
DEFAULT_OUTPUT_NAME="app.bin"

BUILD_DIR="${DEFAULT_BUILD_DIR}"
BUILD_CMD_TEMPLATE="${DEFAULT_BUILD_CMD_TEMPLATE}"
CUSTOM_BUILD_CMD=""
OUTPUT_NAME="" # Will be set by option or default later
VERBOSE=0 # 0 = false, 1 = true

# Function to print messages only if VERBOSE is true
verbose_echo() {
    if [ "$VERBOSE" -eq 1 ]; then
        echo "$@"
    fi
}

# Parse command-line options
TEMP=$(getopt -o d:c:o:vh --long build-dir:,build-cmd:,output:,verbose,help -n 'run-c' -- "$@")
if [ $? != 0 ] ; then echo "Terminating..." >&2 ; exit 1 ; fi

# Note the quotes around "$TEMP": they are essential!
eval set -- "$TEMP"

while true ; do
    case "$1" in
        -d|--build-dir) BUILD_DIR="$2"; shift 2 ;;
        -c|--build-cmd) CUSTOM_BUILD_CMD="$2"; shift 2 ;;
        -o|--output) OUTPUT_NAME="$2"; shift 2 ;;
        -v|--verbose) VERBOSE=1; shift ;;
        -h|--help)
            echo "Usage: $0 [options]"
            echo ""
            echo "Options:"
            echo "  -d, --build-dir DIR   Specify the build directory (default: ${DEFAULT_BUILD_DIR})"
            echo "  -c, --build-cmd CMD   Specify the full build command (replaces default gcc command)"
            echo "                        The command should include the output path placeholder '%OUTPUT%'"
            echo "                        Example: 'clang *.c -o %OUTPUT%'"
            echo "  -o, --output NAME     Specify the output executable filename (default: ${DEFAULT_OUTPUT_NAME})"
            echo "  -v, --verbose         Enable verbose output"
            echo "  -h, --help            Show this help message"
            exit 0 ;;
        --) shift ; break ;;
        *) echo "Internal error!" ; exit 1 ;;
    esac
done

# Check if output name was provided, otherwise use default
if [ -z "${OUTPUT_NAME}" ]; then
    OUTPUT_NAME="${DEFAULT_OUTPUT_NAME}"
    verbose_echo "Output filename not specified, defaulting to ${OUTPUT_NAME}"
fi

# Construct the full output path
OUTPUT_PATH="${BUILD_DIR}/${OUTPUT_NAME}"

# Clean the specific output file if it exists
if [ -f "${OUTPUT_PATH}" ]; then
  verbose_echo "Removing existing executable ${OUTPUT_PATH}..."
  rm -f "${OUTPUT_PATH}"
fi

# Ensure the build directory exists
verbose_echo "Ensuring directory ${BUILD_DIR} exists..."
mkdir -p "${BUILD_DIR}"

# Construct and execute the build command
if [ -n "${CUSTOM_BUILD_CMD}" ]; then
    # Use custom build command, replacing %OUTPUT% with the actual path
    BUILD_CMD="${CUSTOM_BUILD_CMD//%OUTPUT%/${OUTPUT_PATH}}"
    verbose_echo "Using custom build command: ${BUILD_CMD}"
else
    # Use default build command template
    BUILD_CMD="${BUILD_CMD_TEMPLATE} \"${OUTPUT_PATH}\""
    verbose_echo "Using default build command: ${BUILD_CMD}"
fi

verbose_echo "Compiling..."
# Use eval to handle potential spaces and quotes in the command correctly
# Redirect compile stdout/stderr only if not verbose
if [ "$VERBOSE" -eq 1 ]; then
    eval ${BUILD_CMD}
else
    eval ${BUILD_CMD} > /dev/null 2>&1
fi
COMPILE_STATUS=$?

# Check if compilation was successful
if [ ${COMPILE_STATUS} -ne 0 ]; then
  echo "Compilation failed." >&2
  # If not verbose, print the compiler output on failure
  if [ "$VERBOSE" -eq 0 ]; then
      echo "Compiler output:" >&2
      # Re-run compile command without redirection to show errors
      eval ${BUILD_CMD}
  fi
  exit 1
fi

# Run the compiled executable
verbose_echo "Running ${OUTPUT_PATH}..."
"${OUTPUT_PATH}"

exit $?
